spring.application.name=stream-sample
#server.port=63001
#server.port=63000
server.port=63002

# RabbitMQ连接字符串
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# 把两个不同名称的信道 绑定 在一起 重定向到 目的地 一个真正的 Topic
# 不同的信道 绑定到相同的 Topic当中 当生产者发送消息 到指定的 Topic 消费者就可以消费
# 绑定Channel到broadcast
spring.cloud.stream.bindings.myTopic-consumer.destination=broadcast
spring.cloud.stream.bindings.myTopic-producer.destination=broadcast

# 消息分组示例
spring.cloud.stream.bindings.group-consumer.destination=group-topic
spring.cloud.stream.bindings.group-producer.destination=group-topic
# 消息分组是对与消费者来说 划分到组A当中
spring.cloud.stream.bindings.group-consumer.group=Group-A

# 延迟消息配置
spring.cloud.stream.bindings.delayed-consumer.destination=delayed-topic
spring.cloud.stream.bindings.delayed-producer.destination=delayed-topic

# 声明 Queue exchange 类型 创建延迟队列 指定producer exchange类型 delayed Queue 看会有一个DM标签
# 显示为 x-delayed-message
spring.cloud.stream.rabbit.bindings.delayed-producer.producer.delayed-exchange=true

# 消费分区配置
# 消费分区最终会落实在consumer里 所以要把consumer的消费分区功能打开
# 打开消费者的消费分区功能
spring.cloud.stream.bindings.group-consumer.consumer.partitioned=true

# 使用生产者来配置消费分区数量
# 两个消费分区
spring.cloud.stream.bindings.group-producer.producer.partition-count=2

# 如何识别消费分区
# SpEL表达式（Key resolver）
# 只有索引参数为1的节点（消费者），才能消费消息
# 通过生产者的 key expression配置 只有参数为1的节点消费者才能接收到数据
spring.cloud.stream.bindings.group-producer.producer.partition-key-expression=1

# 当前消费者实例总数
spring.cloud.stream.instanceCount=2

# 索引参数 跟上面搭配使用 最大值是 instanceCount-1
# 表示当前实例的索引号
#spring.cloud.stream.instanceIndex=0
spring.cloud.stream.instanceIndex=1

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always