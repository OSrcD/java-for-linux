PORTED FUNCs LIST (138 of 140):

 Scalar cv::mean(Mat src, Mat mask = Mat())
 Scalar cv::sum(Mat src)
 Scalar cv::trace(Mat mtx)
 String cv::getBuildInformation()
 String cv::getHardwareFeatureName(int feature)
 String cv::getVersionString()
 String cv::ipp::getIppVersion()
 String cv::samples::findFile(String relative_path, bool required = true, bool silentMode = false)
 String cv::samples::findFileOrKeep(String relative_path, bool silentMode = false)
 bool cv::checkRange(Mat a, bool quiet = true,  _hidden_ * pos = 0, double minVal = -DBL_MAX, double maxVal = DBL_MAX)
 bool cv::eigen(Mat src, Mat& eigenvalues, Mat& eigenvectors = Mat())
 bool cv::solve(Mat src1, Mat src2, Mat& dst, int flags = DECOMP_LU)
 bool cv::ipp::useIPP()
 bool cv::ipp::useIPP_NotExact()
 double cv::Mahalanobis(Mat v1, Mat v2, Mat icovar)
 double cv::PSNR(Mat src1, Mat src2, double R = 255.)
 double cv::determinant(Mat mtx)
 double cv::getTickFrequency()
 double cv::invert(Mat src, Mat& dst, int flags = DECOMP_LU)
 double cv::kmeans(Mat data, int K, Mat& bestLabels, TermCriteria criteria, int attempts, int flags, Mat& centers = Mat())
 double cv::norm(Mat src1, Mat src2, int normType = NORM_L2, Mat mask = Mat())
 double cv::norm(Mat src1, int normType = NORM_L2, Mat mask = Mat())
 double cv::solvePoly(Mat coeffs, Mat& roots, int maxIters = 300)
 float cv::cubeRoot(float val)
 float cv::fastAtan2(float y, float x)
 int cv::borderInterpolate(int p, int len, int borderType)
 int cv::countNonZero(Mat src)
 int cv::getNumThreads()
 int cv::getNumberOfCPUs()
 int cv::getOptimalDFTSize(int vecsize)
 int cv::getThreadNum()
 int cv::getVersionMajor()
 int cv::getVersionMinor()
 int cv::getVersionRevision()
 int cv::solveCubic(Mat coeffs, Mat& roots)
 int64 cv::getCPUTickCount()
 int64 cv::getTickCount()
 string cv::getCPUFeaturesLine()
 void cv::LUT(Mat src, Mat lut, Mat& dst)
 void cv::PCABackProject(Mat data, Mat mean, Mat eigenvectors, Mat& result)
 void cv::PCACompute(Mat data, Mat& mean, Mat& eigenvectors, Mat& eigenvalues, double retainedVariance)
 void cv::PCACompute(Mat data, Mat& mean, Mat& eigenvectors, Mat& eigenvalues, int maxComponents = 0)
 void cv::PCACompute(Mat data, Mat& mean, Mat& eigenvectors, double retainedVariance)
 void cv::PCACompute(Mat data, Mat& mean, Mat& eigenvectors, int maxComponents = 0)
 void cv::PCAProject(Mat data, Mat mean, Mat eigenvectors, Mat& result)
 void cv::SVBackSubst(Mat w, Mat u, Mat vt, Mat rhs, Mat& dst)
 void cv::SVDecomp(Mat src, Mat& w, Mat& u, Mat& vt, int flags = 0)
 void cv::absdiff(Mat src1, Mat src2, Mat& dst)
 void cv::absdiff(Mat src1, Scalar src2, Mat& dst)
 void cv::add(Mat src1, Mat src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void cv::add(Mat src1, Scalar src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void cv::addWeighted(Mat src1, double alpha, Mat src2, double beta, double gamma, Mat& dst, int dtype = -1)
 void cv::batchDistance(Mat src1, Mat src2, Mat& dist, int dtype, Mat& nidx, int normType = NORM_L2, int K = 0, Mat mask = Mat(), int update = 0, bool crosscheck = false)
 void cv::bitwise_and(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void cv::bitwise_not(Mat src, Mat& dst, Mat mask = Mat())
 void cv::bitwise_or(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void cv::bitwise_xor(Mat src1, Mat src2, Mat& dst, Mat mask = Mat())
 void cv::calcCovarMatrix(Mat samples, Mat& covar, Mat& mean, int flags, int ctype = CV_64F)
 void cv::cartToPolar(Mat x, Mat y, Mat& magnitude, Mat& angle, bool angleInDegrees = false)
 void cv::compare(Mat src1, Mat src2, Mat& dst, int cmpop)
 void cv::compare(Mat src1, Scalar src2, Mat& dst, int cmpop)
 void cv::completeSymm(Mat& m, bool lowerToUpper = false)
 void cv::convertFp16(Mat src, Mat& dst)
 void cv::convertScaleAbs(Mat src, Mat& dst, double alpha = 1, double beta = 0)
 void cv::copyMakeBorder(Mat src, Mat& dst, int top, int bottom, int left, int right, int borderType, Scalar value = Scalar())
 void cv::copyTo(Mat src, Mat& dst, Mat mask)
 void cv::dct(Mat src, Mat& dst, int flags = 0)
 void cv::dft(Mat src, Mat& dst, int flags = 0, int nonzeroRows = 0)
 void cv::divide(Mat src1, Mat src2, Mat& dst, double scale = 1, int dtype = -1)
 void cv::divide(Mat src1, Scalar src2, Mat& dst, double scale = 1, int dtype = -1)
 void cv::divide(double scale, Mat src2, Mat& dst, int dtype = -1)
 void cv::eigenNonSymmetric(Mat src, Mat& eigenvalues, Mat& eigenvectors)
 void cv::exp(Mat src, Mat& dst)
 void cv::extractChannel(Mat src, Mat& dst, int coi)
 void cv::findNonZero(Mat src, Mat& idx)
 void cv::flip(Mat src, Mat& dst, int flipCode)
 void cv::gemm(Mat src1, Mat src2, double alpha, Mat src3, double beta, Mat& dst, int flags = 0)
 void cv::hconcat(vector_Mat src, Mat& dst)
 void cv::idct(Mat src, Mat& dst, int flags = 0)
 void cv::idft(Mat src, Mat& dst, int flags = 0, int nonzeroRows = 0)
 void cv::inRange(Mat src, Scalar lowerb, Scalar upperb, Mat& dst)
 void cv::insertChannel(Mat src, Mat& dst, int coi)
 void cv::log(Mat src, Mat& dst)
 void cv::magnitude(Mat x, Mat y, Mat& magnitude)
 void cv::max(Mat src1, Mat src2, Mat& dst)
 void cv::max(Mat src1, Scalar src2, Mat& dst)
 void cv::meanStdDev(Mat src, vector_double& mean, vector_double& stddev, Mat mask = Mat())
 void cv::merge(vector_Mat mv, Mat& dst)
 void cv::min(Mat src1, Mat src2, Mat& dst)
 void cv::min(Mat src1, Scalar src2, Mat& dst)
 void cv::mixChannels(vector_Mat src, vector_Mat dst, vector_int fromTo)
 void cv::mulSpectrums(Mat a, Mat b, Mat& c, int flags, bool conjB = false)
 void cv::mulTransposed(Mat src, Mat& dst, bool aTa, Mat delta = Mat(), double scale = 1, int dtype = -1)
 void cv::multiply(Mat src1, Mat src2, Mat& dst, double scale = 1, int dtype = -1)
 void cv::multiply(Mat src1, Scalar src2, Mat& dst, double scale = 1, int dtype = -1)
 void cv::normalize(Mat src, Mat& dst, double alpha = 1, double beta = 0, int norm_type = NORM_L2, int dtype = -1, Mat mask = Mat())
 void cv::patchNaNs(Mat& a, double val = 0)
 void cv::perspectiveTransform(Mat src, Mat& dst, Mat m)
 void cv::phase(Mat x, Mat y, Mat& angle, bool angleInDegrees = false)
 void cv::polarToCart(Mat magnitude, Mat angle, Mat& x, Mat& y, bool angleInDegrees = false)
 void cv::pow(Mat src, double power, Mat& dst)
 void cv::randShuffle(Mat& dst, double iterFactor = 1., RNG* rng = 0)
 void cv::randn(Mat& dst, double mean, double stddev)
 void cv::randu(Mat& dst, double low, double high)
 void cv::reduce(Mat src, Mat& dst, int dim, int rtype, int dtype = -1)
 void cv::repeat(Mat src, int ny, int nx, Mat& dst)
 void cv::rotate(Mat src, Mat& dst, int rotateCode)
 void cv::scaleAdd(Mat src1, double alpha, Mat src2, Mat& dst)
 void cv::setErrorVerbosity(bool verbose)
 void cv::setIdentity(Mat& mtx, Scalar s = Scalar(1))
 void cv::setNumThreads(int nthreads)
 void cv::setRNGSeed(int seed)
 void cv::sort(Mat src, Mat& dst, int flags)
 void cv::sortIdx(Mat src, Mat& dst, int flags)
 void cv::split(Mat m, vector_Mat& mv)
 void cv::sqrt(Mat src, Mat& dst)
 void cv::subtract(Mat src1, Mat src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void cv::subtract(Mat src1, Scalar src2, Mat& dst, Mat mask = Mat(), int dtype = -1)
 void cv::transform(Mat src, Mat& dst, Mat m)
 void cv::transpose(Mat src, Mat& dst)
 void cv::vconcat(vector_Mat src, Mat& dst)
 void cv::ipp::setUseIPP(bool flag)
 void cv::ipp::setUseIPP_NotExact(bool flag)
 void cv::samples::addSamplesDataSearchPath(String path)
 void cv::samples::addSamplesDataSearchSubDirectory(String subdir)
 String cv::Algorithm::getDefaultName()
 bool cv::Algorithm::empty()
 void cv::Algorithm::clear()
 void cv::Algorithm::save(String filename)
  cv::TickMeter::TickMeter()
 double cv::TickMeter::getTimeMicro()
 double cv::TickMeter::getTimeMilli()
 double cv::TickMeter::getTimeSec()
 int64 cv::TickMeter::getCounter()
 int64 cv::TickMeter::getTimeTicks()
 void cv::TickMeter::reset()
 void cv::TickMeter::start()
 void cv::TickMeter::stop()

SKIPPED FUNCs LIST (2 of 140):

 void cv::Algorithm::read(FileNode fn)
// Unknown type 'FileNode' (I), skipping the function

 void cv::Algorithm::write(Ptr_FileStorage fs, String name = String())
// Unknown type 'Ptr_FileStorage' (I), skipping the function


0 def args - 89 funcs
1 def args - 32 funcs
2 def args - 15 funcs
3 def args - 1 funcs
4 def args - 1 funcs
5 def args - 2 funcs