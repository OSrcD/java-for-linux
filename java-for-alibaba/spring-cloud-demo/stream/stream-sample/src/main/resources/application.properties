spring.application.name=stream-sample
#server.port=63001
#server.port=63000
#server.port=63002
server.port=63003

# RabbitMQ连接字符串
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# 把两个不同名称的信道 绑定 在一起 重定向到 目的地 一个真正的 Topic
# 不同的信道 绑定到相同的 Topic当中 当生产者发送消息 到指定的 Topic 消费者就可以消费
# 绑定Channel到broadcast
spring.cloud.stream.bindings.myTopic-consumer.destination=broadcast
spring.cloud.stream.bindings.myTopic-producer.destination=broadcast

# 消息分组示例
spring.cloud.stream.bindings.group-consumer.destination=group-topic
spring.cloud.stream.bindings.group-producer.destination=group-topic
# 消息分组是对与消费者来说 划分到组A当中
spring.cloud.stream.bindings.group-consumer.group=Group-A

# 延迟消息配置
spring.cloud.stream.bindings.delayed-consumer.destination=delayed-topic
spring.cloud.stream.bindings.delayed-producer.destination=delayed-topic

# 声明 Queue exchange 类型 创建延迟队列 指定producer exchange类型 delayed Queue 看会有一个DM标签
# 显示为 x-delayed-message
spring.cloud.stream.rabbit.bindings.delayed-producer.producer.delayed-exchange=true

# 异常消息（单机版重试）
spring.cloud.stream.bindings.error-consumer.destination=error-out-topic
spring.cloud.stream.bindings.error-producer.destination=error-out-topic
# 重试次数（本机重试）在当前的Consumer当中不断的重试消息 而不会把消息重新发回给 rabbitmq 是在客户端消费者这里
# 次数=1相当于不重试 最大尝试次数 1 没有重试 它消费这条消息当次 就算是第一次了
spring.cloud.stream.bindings.error-consumer.consumer.max-attempts=2



# 异常消息（requeue重试）
spring.cloud.stream.bindings.requeue-consumer.destination=requeue-topic
spring.cloud.stream.bindings.requeue-producer.destination=requeue-topic
# 冲突问题 retry的次数 如果配置了retry次数 也就是指定了 它在原地retry 失败以后 还会把它添加queue里面吗？
# 不会了 要强制的它的retry次数 指定成 1 也就是说 我不让你在原地 retry 失败了就立马 把这个失败消息 退回到rabbitmq当中
# 重新添加进去 让其他consumer 可以消费它
# 必须把max-attempts 设置为 1，否则requeue功能就不能生效
spring.cloud.stream.bindings.error-consumer.consumer.max-attempts=1
spring.cloud.stream.bindings.group-consumer.group=requeue-group
# 开启requeue 功能
# 仅对当前requeue-consumer，开启requeue
spring.cloud.stream.rabbit.bindings.requeue-consumer.consumer.requeueRejected=true



# 在全局范围内开启重新入队
# 默认全局开启requeue
# spring.rabbitmq.listener.default-requeue-rejected=true

# 消费分区配置
# 消费分区最终会落实在consumer里 所以要把consumer的消费分区功能打开
# 打开消费者的消费分区功能
spring.cloud.stream.bindings.group-consumer.consumer.partitioned=true

# 使用生产者来配置消费分区数量
# 两个消费分区
spring.cloud.stream.bindings.group-producer.producer.partition-count=2

# 如何识别消费分区
# SpEL表达式（Key resolver）
# 只有索引参数为1的节点（消费者），才能消费消息
# 通过生产者的 key expression配置 只有参数为1的节点消费者才能接收到数据
spring.cloud.stream.bindings.group-producer.producer.partition-key-expression=1

# 当前消费者实例总数
spring.cloud.stream.instanceCount=2

# 索引参数 跟上面搭配使用 最大值是 instanceCount-1
# 表示当前实例的索引号
#spring.cloud.stream.instanceIndex=0
spring.cloud.stream.instanceIndex=1

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always