<?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:aop="http://www.springframework.org/schema/aop"
           xmlns:tx="http://www.springframework.org/schema/tx"
           xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

        <!-- 引入数据库连接属性配置文件 -->
        <bean id="propertyConfigurer"
              class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="location" value="classpath:database.properties" />
        </bean>
        <!--<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"  destroy-method="close">-->
            <!--<property name="driverClassName" value="${driver}" />-->
            <!--<property name="url" value="${url}" />-->
            <!--<property name="username" value="${username}" />-->
            <!--<property name="password" value="${password}" />-->
        <!--</bean>-->
	<!-- 配置数据源 -->  
	<!-- #DBCP数据库连接池配置属性详细内容可参考官网描述：
       #http://commons.apache.org/proper/commons-dbcp/configuration.html 
       -->

    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="com.mysql.jdbc.Driver" />
        <property name="username" value="root" />
        <property name="password" value="" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="5"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="3"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="2"></property>
    </bean>
      
    <!-- jdbc事务管理器 -->  
    <bean id="txManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />
    </bean>  
    <!--事务模板 -->
    <!-- 2、注释模式事务：启动使用注解实现声明式事务管理的支持   -->
    <tx:annotation-driven transaction-manager="txManager" />
    <!-- 想创建的服务对象：this is the service object that we want to make transactional -->
    <!--<bean id="fooService" class="com.mooc.service.DefaultFooService"/>-->
    <!--<bean id="xbeanService" class="com.mooc.service.XbeanServiceImpl"/>-->
    <bean id="bookService" class="com.mooc.service.BookServiceImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 1、通过事务通知的模式实现事务
    事务通知：the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- 以get开头的所有方法都为只读事务：all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true"/>
            <!-- 其它方法使用默认事务设置：other methods use the default transaction settings (see below) -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <!-- 确保上述事务通知对定义在FooService接口中的方法都起作用(
    ensure that the above transactional advice runs for any execution
    of an operation defined by the FooService interface) -->
    <!--<aop:config>-->
        <!--<aop:pointcut id="fooServiceOperation" expression="execution(* com.mooc.service.FooService.*(..))"/>-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>-->
    <!--</aop:config>-->
    <aop:config>
        <aop:pointcut id="bookServiceOperation" expression="execution(* com.mooc.service.BookService.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="bookServiceOperation"></aop:advisor>
    </aop:config>
</beans>  